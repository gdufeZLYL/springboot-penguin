/*
Navicat MySQL Data Transfer

Source Server         : 本地mysql
Source Server Version : 50719
Source Host           : localhost:3306
Source Database       : db_qexz_penguin

Target Server Type    : MYSQL
Target Server Version : 50719
File Encoding         : 65001

Date: 2018-10-13 10:09:48
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for t_penguin_account
-- ----------------------------
DROP TABLE IF EXISTS `t_penguin_account`;
CREATE TABLE `t_penguin_account` (
  `id` int(8) NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `name` varchar(63) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '姓名',
  `username` varchar(30) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '账号,一般为学号或者教工号',
  `password` varchar(60) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '密码',
  `qq` varchar(30) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT 'QQ',
  `phone` varchar(30) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `email` varchar(30) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '邮箱',
  `description` varchar(63) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '个人描述',
  `avatar_img_url` varchar(63) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '头像',
  `state` int(8) DEFAULT '0' COMMENT '当前账号状态,0表示正常,1表示禁用',
  `level` int(8) DEFAULT '0' COMMENT '0表示学生,1表示教师,2表示管理员',
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of t_penguin_account
-- ----------------------------
INSERT INTO `t_penguin_account` VALUES ('1', '曾庆熙', '14251104208', '123456', '111111111111', '11111111111', 'qq@foxmail.com', '搬砖', null, '0', '0', '2018-01-08 19:36:13', '2018-04-13 19:33:13');
INSERT INTO `t_penguin_account` VALUES ('2', '管理员', 'admin', '5FFFCE11572B59C9E5256949F90D1D9D', '11111111111', '11111111111', 'qq@foxmail.com', '只会HelloWorld的程序员', '6ab08a65-c969-4d6a-84dd-f0233d574459.png', '0', '2', '2018-01-30 09:47:38', '2018-01-30 09:48:46');
INSERT INTO `t_penguin_account` VALUES ('3', '曾小熙', '14251104200', '5FFFCE11572B59C9E5256949F90D1D9D', '11111111111', '11111111111', 'qq@foxmail.com', '', 'headimg_placeholder.png', '0', '0', '2018-03-02 15:08:44', '2018-03-02 15:16:34');
INSERT INTO `t_penguin_account` VALUES ('4', '曾大熙', '14251104201', '5FFFCE11572B59C9E5256949F90D1D9D', '11111111111', '11111111111', 'qq@foxmail.com', '', 'headimg_placeholder.png', '0', '0', '2018-03-02 15:18:35', '2018-03-02 15:18:35');
INSERT INTO `t_penguin_account` VALUES ('5', '曾庆熙', '14251104208', '123456', '11111111111', '11111111111', 'qq@foxmail.com', '搬砖', 'headimg_placeholder.png', '0', '0', '2018-04-13 19:33:13', '2018-04-13 19:33:13');

-- ----------------------------
-- Table structure for t_penguin_comment
-- ----------------------------
DROP TABLE IF EXISTS `t_penguin_comment`;
CREATE TABLE `t_penguin_comment` (
  `id` int(8) NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `user_id` int(8) DEFAULT NULL COMMENT '用户ID',
  `post_id` int(8) DEFAULT NULL COMMENT '帖子id',
  `content` text COLLATE utf8mb4_unicode_ci COMMENT '内容',
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of t_penguin_comment
-- ----------------------------
INSERT INTO `t_penguin_comment` VALUES ('1', '1', '6', '第一', '2018-03-03 20:23:45');
INSERT INTO `t_penguin_comment` VALUES ('2', '2', '6', '第二', '2018-03-03 20:28:19');
INSERT INTO `t_penguin_comment` VALUES ('3', '1', '6', '牛批！Σ(⊙▽⊙\"a', '2018-03-03 21:03:06');
INSERT INTO `t_penguin_comment` VALUES ('4', '3', '6', '我来了', '2018-03-03 21:16:47');

-- ----------------------------
-- Table structure for t_penguin_contest
-- ----------------------------
DROP TABLE IF EXISTS `t_penguin_contest`;
CREATE TABLE `t_penguin_contest` (
  `id` int(8) NOT NULL AUTO_INCREMENT,
  `title` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `total_score` int(8) DEFAULT NULL COMMENT '考试总分',
  `subject_id` int(8) DEFAULT NULL COMMENT '学科ID',
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `start_time` timestamp NULL DEFAULT NULL COMMENT '考试开始时间',
  `end_time` timestamp NULL DEFAULT NULL COMMENT '考试结束时间',
  `state` int(8) DEFAULT '0' COMMENT '进行状态:0表示未开始,1表示进行中,2表示考试已经结束,3表示该考试已经完成批卷',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of t_penguin_contest
-- ----------------------------
INSERT INTO `t_penguin_contest` VALUES ('4', '广东财经大学2017年数据库原理与应用考试试题A卷', '100', '8', '2018-02-16 14:19:51', '2018-03-09 17:03:28', '2018-03-09 12:26:00', '2018-03-09 17:00:00', '3');
INSERT INTO `t_penguin_contest` VALUES ('5', '广东财经大学2017年数据库原理与应用考试试题B卷', '0', '8', '2018-02-20 15:30:53', '2018-03-03 22:24:19', '2018-02-16 09:00:00', '2018-02-16 11:00:00', '2');
INSERT INTO `t_penguin_contest` VALUES ('6', '广东财经大学2017年数据库原理与应用考试试题C卷', '0', '8', '2018-03-03 21:28:42', '2018-03-03 22:24:19', '2018-03-03 22:19:00', '2018-03-03 22:21:00', '2');

-- ----------------------------
-- Table structure for t_penguin_grade
-- ----------------------------
DROP TABLE IF EXISTS `t_penguin_grade`;
CREATE TABLE `t_penguin_grade` (
  `id` int(8) NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `student_id` int(8) DEFAULT NULL COMMENT '考生主键ID',
  `contest_id` int(8) DEFAULT NULL COMMENT '考试主键ID',
  `result` int(8) DEFAULT '0' COMMENT '最终分数',
  `auto_result` int(8) DEFAULT '0' COMMENT '电脑自动评判选择题分数',
  `manul_result` int(8) DEFAULT NULL COMMENT '人工手动评判分数',
  `answer_json` longtext COLLATE utf8mb4_unicode_ci COMMENT '考试作答答案json',
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '考试交卷时间',
  `finish_time` timestamp NULL DEFAULT NULL COMMENT '改卷完成时间',
  `state` int(8) DEFAULT '0' COMMENT '0表示已交卷但是未评卷,1表示已交卷已评卷',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of t_penguin_grade
-- ----------------------------
INSERT INTO `t_penguin_grade` VALUES ('2', '1', '4', '98', '40', '58', 'D_~_A_~_C_~_A_~_B_~_D_~_D_~_C_~_1. 实体完整性约束 要求候选码非空且唯一。\n\n2. 参照完整性约束 要求外码要么取空值要么所取的值在对应的候选码中出现。\n\n3. 用户自定义完整性。包括非空约束，唯一约束，检查约束，缺省值约束等。_~_1. 丢失修改\n\n2. 读“脏”数据\n\n3. 不可重复读\n\n通过基于锁的协议实现对事务并发控制。_~_\n\n一级封锁协议：对对象加写锁，直到事物结束时才释放写锁。\n\n二级封锁协议：在一级封锁协议的基础上，给事物加读锁，读完后立即释放读锁。\n\n三级封锁协议：在一级封锁协议的基础上，给事务加锁，知道事物结束释放。', '2018-02-23 21:01:41', '2018-02-27 18:09:53', '1');
INSERT INTO `t_penguin_grade` VALUES ('4', '1', '5', '98', '49', '49', '', '2018-03-09 16:02:02', '2018-03-28 16:02:09', '1');
INSERT INTO `t_penguin_grade` VALUES ('5', '1', '6', '100', '50', '50', null, '2018-03-09 16:02:57', '2018-03-12 16:02:53', '1');

-- ----------------------------
-- Table structure for t_penguin_post
-- ----------------------------
DROP TABLE IF EXISTS `t_penguin_post`;
CREATE TABLE `t_penguin_post` (
  `id` int(8) NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `author_id` int(8) DEFAULT NULL COMMENT '作者ID',
  `html_content` longtext COLLATE utf8mb4_unicode_ci COMMENT 'html源代码',
  `text_content` longtext COLLATE utf8mb4_unicode_ci COMMENT '文本内容',
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '发帖时间',
  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '帖子最后编辑时间',
  `last_reply_time` timestamp NULL DEFAULT NULL COMMENT '最后一次回复时间',
  `reply_num` int(8) DEFAULT '0' COMMENT '回复数',
  `title` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '标题',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of t_penguin_post
-- ----------------------------
INSERT INTO `t_penguin_post` VALUES ('2', '1', '<h3>一面50分钟(2017.3.27)</h3><ol><li>聊了自己博客（聊天）</li><li>聊了自己做的一些小项目（聊天）</li><li>socket编程(自己项目上的坑)</li><li>int i = 1和Integer i = new Integer(1)区别</li><li>听说过轮询吗？</li><li>算法题：全排列</li><li>数据库查询语句编写</li><li>http状态码：200,202,301,302,304,404,500等</li><li>常用的集合框架(LinkedList, ArrayList, HashMap等等)</li><li>哈希表处理冲突的方法</li><li>HashMap的实现原理</li><li>最近看了什么书</li></ol><h3>二面40分钟(2017.4.10)</h3><ol><li>说说写一个登录需要注意什么问题（聊天）</li><li>说说微博失效问题(重新登录)怎么实现（聊天）</li><li>http和https区别</li><li>sliding window（滑动窗口）</li><li>算法题：找出字符串的最长不重复连续子串的长度（输入：abcabcab,输出3, 输入：pwwkew，输出：3）</li><li>LinkedList与ArrayList区别</li><li>HashMap, HashTable, CurrentHashMap区别</li><li>怎么实现ArrayList安全访问(聊了synchronized实现等待/通知机制)</li><li>有什么问题想问</li></ol><h3>面试感觉：两轮的面试官都挺好的，难度也不大，主要还是聊了很多</h3><h3>收到电话通知(2017.4.13)，选了武汉。。。</h3>', '一面50分钟(2017.3.27)聊了自己博客（聊天）聊了自己做的一些小项目（聊天）socket编程(自己项目上的坑)int i = 1和Integer i = new Integer(1)区别听说过轮询吗？算法题：全排列数据库查询语句编写http状态码：200,202,301,302,304,404,500等常用的集合框架(LinkedList, ArrayList, HashMap等等)哈希表处理冲突的方法HashMap的实现原理最近看了什么书二面40分钟(2017.4.10)说说写一个登录需要注意什么问题（聊天）说说微博失效问题(重新登录)怎么实现（聊天）http和https区别sliding window（滑动窗口）算法题：找出字符串的最长不重复连续子串的长度（输入：abcabcab,输出3, 输入：pwwkew，输出：3）LinkedList与ArrayList区别HashMap, HashTable, CurrentHashMap区别怎么实现ArrayList安全访问(聊了synchronized实现等待/通知机制)有什么问题想问面试感觉：两轮的面试官都挺好的，难度也不大，主要还是聊了很多收到电话通知(2017.4.13)，选了武汉。。。', '2018-03-02 21:05:50', '2018-03-03 08:39:08', null, '0', '人人研发工程师实习生面试经历（Java）');
INSERT INTO `t_penguin_post` VALUES ('3', '1', '<h3><strong>一面</strong></h3><ol><li>写自己知道的Linux命令；</li><li>你对数据库进行查询，发现查询很慢，对代码排查，代码没问题，你怎么对数据库进行排查；（聊了索引）</li><li>给你一个数据库，数据库里面数据很大（TB级），你怎么解决查询慢（性能优化）的问题；（分区技术）</li><li>分区的类型；</li><li>加密算法(md5、base64等等)</li><li>你用的是多进程还是多线程；（多进程和多线程的区别）</li><li>socket编程，怎么实现一个多人聊天室；（怎么设计、怎么实现）</li><li>http和https区别；(https = http + ssl)</li><li>查找算法（顺序查找、二分查找、二叉排序树、平衡二叉树、哈希法等等）</li></ol><h3><strong>二面</strong></h3><ol><li>自我介绍（个人擅长的领域、个人突出的地方）</li><li>（笔试里面的一道题）数据库里有10000000条用户信息，需要给每位用户发送信息（必须发送成功），要求节省内存（主键索引、分区技术、异步处理）</li><li>HTTP请求方法（GET、HEAD、POST、PUT、DELETE、CONNECT、OPTIONS、TRACE）</li><li>GET与POST请求区别（根据笔试题的回答提问），POST请求运用，GET幂等的理解，GET请求URL显示，GET请求URL中为什么有“？”（例如：<a target=\"_blank\">https://www.nowcoder.com/discuss/post?type=2），访问“http://www.docer.com/?from=nav</a>&nbsp;_wps”后怎么显示，也就是空格的显示（出现“<a target=\"_blank\">http://www.docer.com/?from=nav%20_wps”）</a></li><li>说说RESTful架构</li><li>说说字典树</li><li>平时怎么写数据库的模糊查询（由字典树扯到模糊查询，前缀查询，例如“abc%”，还是索引策略的问题）</li><li>面向对象编程的理解</li><li>平时怎么写面向对象编程（聊了面向接口编程）</li><li>socket编程，怎么实现信息传输，还是多人聊天室的问题（项目的坑）</li><li>MySQL事务隔离等级，MySQL默认的事务隔离等级</li><li>MySQL事务特性<h3><strong>PS：金山WPS的服务端开发主要是GO语言</strong></h3></li></ol>', '一面写自己知道的Linux命令；你对数据库进行查询，发现查询很慢，对代码排查，代码没问题，你怎么对数据库进行排查；（聊了索引）给你一个数据库，数据库里面数据很大（TB级），你怎么解决查询慢（性能优化）的问题；（分区技术）分区的类型；加密算法(md5、base64等等)你用的是多进程还是多线程；（多进程和多线程的区别）socket编程，怎么实现一个多人聊天室；（怎么设计、怎么实现）http和https区别；(https = http + ssl)查找算法（顺序查找、二分查找、二叉排序树、平衡二叉树、哈希法等等）二面自我介绍（个人擅长的领域、个人突出的地方）（笔试里面的一道题）数据库里有10000000条用户信息，需要给每位用户发送信息（必须发送成功），要求节省内存（主键索引、分区技术、异步处理）HTTP请求方法（GET、HEAD、POST、PUT、DELETE、CONNECT、OPTIONS、TRACE）GET与POST请求区别（根据笔试题的回答提问），POST请求运用，GET幂等的理解，GET请求URL显示，GET请求URL中为什么有“？”（例如：https://www.nowcoder.com/discuss/post?type=2），访问“http://www.docer.com/?from=nav&nbsp;_wps”后怎么显示，也就是空格的显示（出现“http://www.docer.com/?from=nav%20_wps”）说说RESTful架构说说字典树平时怎么写数据库的模糊查询（由字典树扯到模糊查询，前缀查询，例如“abc%”，还是索引策略的问题）面向对象编程的理解平时怎么写面向对象编程（聊了面向接口编程）socket编程，怎么实现信息传输，还是多人聊天室的问题（项目的坑）MySQL事务隔离等级，MySQL默认的事务隔离等级MySQL事务特性PS：金山WPS的服务端开发主要是GO语言', '2018-03-03 10:15:30', '2018-03-03 10:17:22', null, '0', '金山WPS服务端开发工程师面试经历');
INSERT INTO `t_penguin_post` VALUES ('4', '1', '<h3><strong>一面</strong></h3><ol><li>写自己知道的Linux命令；</li><li>你对数据库进行查询，发现查询很慢，对代码排查，代码没问题，你怎么对数据库进行排查；（聊了索引）</li><li>给你一个数据库，数据库里面数据很大（TB级），你怎么解决查询慢（性能优化）的问题；（分区技术）</li><li>分区的类型；</li><li>加密算法(md5、base64等等)</li><li>你用的是多进程还是多线程；（多进程和多线程的区别）</li><li>socket编程，怎么实现一个多人聊天室；（怎么设计、怎么实现）</li><li>http和https区别；(https = http + ssl)</li><li>查找算法（顺序查找、二分查找、二叉排序树、平衡二叉树、哈希法等等）</li></ol><h3><strong>二面</strong></h3><ol><li>自我介绍（个人擅长的领域、个人突出的地方）</li><li>（笔试里面的一道题）数据库里有10000000条用户信息，需要给每位用户发送信息（必须发送成功），要求节省内存（主键索引、分区技术、异步处理）</li><li>HTTP请求方法（GET、HEAD、POST、PUT、DELETE、CONNECT、OPTIONS、TRACE）</li><li>GET与POST请求区别（根据笔试题的回答提问），POST请求运用，GET幂等的理解，GET请求URL显示，GET请求URL中为什么有“？”（例如：<a target=\"_blank\">https://www.nowcoder.com/discuss/post?type=2），访问“http://www.docer.com/?from=nav</a>&nbsp;_wps”后怎么显示，也就是空格的显示（出现“<a target=\"_blank\">http://www.docer.com/?from=nav%20_wps”）</a></li><li>说说RESTful架构</li><li>说说字典树</li><li>平时怎么写数据库的模糊查询（由字典树扯到模糊查询，前缀查询，例如“abc%”，还是索引策略的问题）</li><li>面向对象编程的理解</li><li>平时怎么写面向对象编程（聊了面向接口编程）</li><li>socket编程，怎么实现信息传输，还是多人聊天室的问题（项目的坑）</li><li>MySQL事务隔离等级，MySQL默认的事务隔离等级</li><li>MySQL事务特性<h3><strong>PS：金山WPS的服务端开发主要是GO语言</strong></h3></li></ol>', '一面写自己知道的Linux命令；你对数据库进行查询，发现查询很慢，对代码排查，代码没问题，你怎么对数据库进行排查；（聊了索引）给你一个数据库，数据库里面数据很大（TB级），你怎么解决查询慢（性能优化）的问题；（分区技术）分区的类型；加密算法(md5、base64等等)你用的是多进程还是多线程；（多进程和多线程的区别）socket编程，怎么实现一个多人聊天室；（怎么设计、怎么实现）http和https区别；(https = http + ssl)查找算法（顺序查找、二分查找、二叉排序树、平衡二叉树、哈希法等等）二面自我介绍（个人擅长的领域、个人突出的地方）（笔试里面的一道题）数据库里有10000000条用户信息，需要给每位用户发送信息（必须发送成功），要求节省内存（主键索引、分区技术、异步处理）HTTP请求方法（GET、HEAD、POST、PUT、DELETE、CONNECT、OPTIONS、TRACE）GET与POST请求区别（根据笔试题的回答提问），POST请求运用，GET幂等的理解，GET请求URL显示，GET请求URL中为什么有“？”（例如：https://www.nowcoder.com/discuss/post?type=2），访问“http://www.docer.com/?from=nav&nbsp;_wps”后怎么显示，也就是空格的显示（出现“http://www.docer.com/?from=nav%20_wps”）说说RESTful架构说说字典树平时怎么写数据库的模糊查询（由字典树扯到模糊查询，前缀查询，例如“abc%”，还是索引策略的问题）面向对象编程的理解平时怎么写面向对象编程（聊了面向接口编程）socket编程，怎么实现信息传输，还是多人聊天室的问题（项目的坑）MySQL事务隔离等级，MySQL默认的事务隔离等级MySQL事务特性PS：金山WPS的服务端开发主要是GO语言', '2018-03-03 10:19:29', '2018-03-03 10:21:08', null, '0', '金山WPS服务端开发工程师面试经历');
INSERT INTO `t_penguin_post` VALUES ('6', '1', '<div id=\"wmd-preview-section-19\"><h5 id=\"时间限制3秒-空间限制32768k\">时间限制：3秒 空间限制：32768K</h5></div><div id=\"wmd-preview-section-20\"><h5 id=\"热度指数899\">热度指数：899</h5></div><div id=\"wmd-preview-section-21\"><h5 id=\"本题知识点-动态规划\">本题知识点： 动态规划</h5></div><div id=\"wmd-preview-section-22\"><h4 id=\"题目描述\">题目描述</h4><p>在股市的交易日中，假设最多可进行两次买卖(即买和卖的次数均小于等于2)，规则是必须一笔成交后进行另一笔(即买-卖-买-卖的顺序进行)。给出一天中的股票变化序列，请写一个程序计算一天可以获得的最大收益。请采用实践复杂度低的方法实现。&nbsp;<br>给定价格序列prices及它的长度n，请返回最大收益。保证长度小于等于500。</p></div><div id=\"wmd-preview-section-23\"><h5 id=\"测试样例\">测试样例：</h5></div><div id=\"wmd-preview-section-24\"><pre><code>[10,22,5,75,65,80],6</code></pre></div><div id=\"wmd-preview-section-25\"><h4 id=\"返回\">返回：</h4></div><div id=\"wmd-preview-section-26\"><pre><code>87</code></pre><hr></div><div id=\"wmd-preview-section-27\"><h4 id=\"代码\">代码：</h4></div><div id=\"wmd-preview-section-28\"><pre><code>import java.util.*;\n\n//比较器（无用）\nclass Comparators {\n    public static Comparator getComparator() {\n        return new Comparator() {\n            @Override\n            public int compare(Object o1, Object o2) {\n                if (o1 instanceof Integer) {\n                    return compare( (Integer) o1, (Integer) o2);\n                } else return 1;\n            }\n\n            public int compare(Integer s1, Integer s2) {\n                return s2-s1;\n            }\n\n        };\n    }\n}\n\npublic class Main {\n\n    //纯暴力, 2310ms\n    public static int maxProfit1(int[] prices, int n) {\n        // write code here\n        int ans = 0;\n        //购买2次\n        for(int i = 0; i &lt;= n-4; i++) {\n            for(int j = i+1; j &lt;= n-3; j++) {\n                for(int k = j+1; k &lt;= n-2; k++) {\n                    for(int l = k+1; l &lt;= n-1; l++) {\n                        ans = Math.max(ans, prices[l]+prices[j]-prices[i]-prices[k]);\n                    }\n                }\n            }\n        }\n        //购买1次\n        for(int i = 0; i &lt;= n-2; i++) {\n            for(int j = i+1; j &lt;= n-1; j++) {\n                ans = Math.max(ans, prices[j]-prices[i]);\n            }\n        }\n        return ans;\n    }\n\n    //DP, 73ms\n    public static int maxProfit(int[] prices, int n) {\n        // write code here\n        //记录i天之前(包括i天)一笔成交后的最大利润\n        int[] pre = new int[n+10];\n        //记录i天之后(包括i天)一笔成交后的最大利润\n        int[] post = new int[n+10];\n\n        //第0天买第0天卖\n        pre[0] = 0;\n        //记录i天之前(包括i天)股票的最低价格\n        int minp = prices[0];\n        for(int i = 1; i &lt; n; i++) {\n            minp = Math.min(minp, prices[i]);\n            //比较在i这天卖利润高，还是i天之前卖利润高\n            pre[i] = Math.max(pre[i-1], prices[i]-minp);\n        }\n\n        //第n-1天买第n-1天卖\n        post[n-1] = 0;\n        //记录i天之前(包括i天)股票的最高价格\n        int maxp = prices[n-1];\n        for(int i = n-2; i &gt;= 0; i--) {\n            maxp = Math.max(maxp, prices[i]);\n            //比较在i这天买利润高，还是i天之后买利润高\n            post[i] = Math.max(post[i+1], maxp-prices[i]);\n        }\n\n        //ans = max(pre[i]+post[i])(0&lt;=i&lt;n)\n        int ans = pre[0]+post[0];\n        for(int i = 1; i &lt; n; i++) {\n            ans = Math.max(ans, pre[i]+post[i]);\n        }\n        return ans;\n    }\n\n    /*\n        测试代码\n     */\n    public static void main(String []args){\n        /*\n        Scanner sc = new Scanner(System.in);\n        while(sc.hasNext()){\n\n        }\n        */\n        int[] prices = {235,55,628,455,414,547,454};\n        int n = 7;\n        System.out.println(maxProfit(prices, n));\n    }\n}</code></pre></div>', '时间限制：3秒 空间限制：32768K热度指数：899本题知识点： 动态规划题目描述在股市的交易日中，假设最多可进行两次买卖(即买和卖的次数均小于等于2)，规则是必须一笔成交后进行另一笔(即买-卖-买-卖的顺序进行)。给出一天中的股票变化序列，请写一个程序计算一天可以获得的最大收益。请采用实践复杂度低的方法实现。&nbsp;给定价格序列prices及它的长度n，请返回最大收益。保证长度小于等于500。测试样例：[10,22,5,75,65,80],6返回：87代码：import java.util.*;\n\n//比较器（无用）\nclass Comparators {\n    public static Comparator getComparator() {\n        return new Comparator() {\n            @Override\n            public int compare(Object o1, Object o2) {\n                if (o1 instanceof Integer) {\n                    return compare( (Integer) o1, (Integer) o2);\n                } else return 1;\n            }\n\n            public int compare(Integer s1, Integer s2) {\n                return s2-s1;\n            }\n\n        };\n    }\n}\n\npublic class Main {\n\n    //纯暴力, 2310ms\n    public static int maxProfit1(int[] prices, int n) {\n        // write code here\n        int ans = 0;\n        //购买2次\n        for(int i = 0; i &lt;= n-4; i++) {\n            for(int j = i+1; j &lt;= n-3; j++) {\n                for(int k = j+1; k &lt;= n-2; k++) {\n                    for(int l = k+1; l &lt;= n-1; l++) {\n                        ans = Math.max(ans, prices[l]+prices[j]-prices[i]-prices[k]);\n                    }\n                }\n            }\n        }\n        //购买1次\n        for(int i = 0; i &lt;= n-2; i++) {\n            for(int j = i+1; j &lt;= n-1; j++) {\n                ans = Math.max(ans, prices[j]-prices[i]);\n            }\n        }\n        return ans;\n    }\n\n    //DP, 73ms\n    public static int maxProfit(int[] prices, int n) {\n        // write code here\n        //记录i天之前(包括i天)一笔成交后的最大利润\n        int[] pre = new int[n+10];\n        //记录i天之后(包括i天)一笔成交后的最大利润\n        int[] post = new int[n+10];\n\n        //第0天买第0天卖\n        pre[0] = 0;\n        //记录i天之前(包括i天)股票的最低价格\n        int minp = prices[0];\n        for(int i = 1; i &lt; n; i++) {\n            minp = Math.min(minp, prices[i]);\n            //比较在i这天卖利润高，还是i天之前卖利润高\n            pre[i] = Math.max(pre[i-1], prices[i]-minp);\n        }\n\n        //第n-1天买第n-1天卖\n        post[n-1] = 0;\n        //记录i天之前(包括i天)股票的最高价格\n        int maxp = prices[n-1];\n        for(int i = n-2; i &gt;= 0; i--) {\n            maxp = Math.max(maxp, prices[i]);\n            //比较在i这天买利润高，还是i天之后买利润高\n            post[i] = Math.max(post[i+1], maxp-prices[i]);\n        }\n\n        //ans = max(pre[i]+post[i])(0&lt;=i&lt;n)\n        int ans = pre[0]+post[0];\n        for(int i = 1; i &lt; n; i++) {\n            ans = Math.max(ans, pre[i]+post[i]);\n        }\n        return ans;\n    }\n\n    /*\n        测试代码\n     */\n    public static void main(String []args){\n        /*\n        Scanner sc = new Scanner(System.in);\n        while(sc.hasNext()){\n\n        }\n        */\n        int[] prices = {235,55,628,455,414,547,454};\n        int n = 7;\n        System.out.println(maxProfit(prices, n));\n    }\n}', '2018-03-03 14:25:57', '2018-03-03 21:16:47', '2018-03-03 21:16:47', '4', '【校招笔试】股票交易日（dp）');
INSERT INTO `t_penguin_post` VALUES ('7', '1', '<main id=\"meditor_box\"><div id=\"editorBox\"><div id=\"csdnEditor\"><div><div><div><div><div><div id=\"preview-contents\"><div id=\"wmd-preview-section-19\"><h2 id=\"参考\">参考</h2><p>（1）<a href=\"http://blog.csdn.net/qq_27602093/article/details/52400677\">使用IDEA创建javaweb项目</a>&nbsp;<br>（2）<a href=\"http://www.cnblogs.com/hellokitty1/p/5216025.html\">MyBatis学习笔记(一）入门</a>（重点）&nbsp;<br>（3）<a href=\"http://www.cnblogs.com/jeffen/p/6027970.html\">IntelliJ IDEA手动配置连接MySQL数据库</a>&nbsp;<br>（4）<a href=\"http://blog.csdn.net/slow_wakler/article/details/54844944\">IntelliJ IDEA单元测试入门</a></p><hr></div><div id=\"wmd-preview-section-20\"><h2 id=\"创建java-web项目\">创建Java Web项目</h2><p>参考：<a href=\"http://blog.csdn.net/qq_27602093/article/details/52400677\">使用IDEA创建javaweb项目</a>&nbsp;<br><img src=\"http://img.blog.csdn.net/20170208101121157?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU2xvd19XYWtsZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"><br><img src=\"http://img.blog.csdn.net/20170208101133563?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU2xvd19XYWtsZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"></p><hr></div><div id=\"wmd-preview-section-21\"><h2 id=\"导入mybatis所需的jar包\">导入MyBatis所需的jar包</h2><p>参考：<a href=\"http://www.cnblogs.com/hellokitty1/p/5216025.html\">MyBatis学习笔记(一）入门</a>&nbsp;<br>mybatis需要jar包：mybatis-3.4.2.jar&nbsp;<br>mysql驱动jar包：mysql-connector-java-5.1.39-bin.jar&nbsp;<br>日志记录jar包：log4j-1.2.17.jar，slf4j-api-1.7.12.jar，slf4j-log4j12-1.7.12.jar&nbsp;<br><img src=\"http://img.blog.csdn.net/20170208110150666?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU2xvd19XYWtsZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"></p><hr></div><div id=\"wmd-preview-section-22\"><h2 id=\"创建数据库mybatis和表tuser\">创建数据库mybatis和表t_user</h2><p><img src=\"http://img.blog.csdn.net/20170208105549068?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU2xvd19XYWtsZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"><br><img src=\"http://img.blog.csdn.net/20170208105600349?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU2xvd19XYWtsZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"></p><hr></div><div id=\"wmd-preview-section-23\"><h2 id=\"idea配置mysql数据源\">IDEA配置MySQL数据源</h2><p>参考：<a href=\"http://www.cnblogs.com/jeffen/p/6027970.html\">IntelliJ IDEA手动配置连接MySQL数据库</a>&nbsp;<br><img src=\"http://img.blog.csdn.net/20170208112253440?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU2xvd19XYWtsZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"><br><img src=\"http://img.blog.csdn.net/20170208112356034?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU2xvd19XYWtsZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\">&nbsp;<br><img src=\"http://img.blog.csdn.net/20170208112836161?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU2xvd19XYWtsZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"><br>点击Test Connection&nbsp;<br><img src=\"http://img.blog.csdn.net/20170208113047772?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU2xvd19XYWtsZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"><br>点击OK后，可以看到&nbsp;<br><img src=\"http://img.blog.csdn.net/20170208113229148?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU2xvd19XYWtsZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"></p><hr></div><div id=\"wmd-preview-section-24\"><h2 id=\"mybatis入门demo\">MyBatis入门Demo</h2><p>参考：<a href=\"http://www.cnblogs.com/hellokitty1/p/5216025.html\">MyBatis学习笔记(一）入门</a></p></div><div id=\"wmd-preview-section-25\"><h3 id=\"1代码结构\">（1）代码结构</h3><p><img src=\"http://img.blog.csdn.net/20170208124742001?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU2xvd19XYWtsZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"></p></div><div id=\"wmd-preview-section-26\"><h3 id=\"2mysql驱动配置文件\">（2）mysql驱动配置文件</h3><p><img src=\"http://img.blog.csdn.net/20170208124950894?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU2xvd19XYWtsZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"></p></div><div id=\"wmd-preview-section-27\"><pre><code>jdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=UTF-8\njdbc.username=root\njdbc.password=123456</code></pre></div><div id=\"wmd-preview-section-28\"><h3 id=\"3日志配置文件\">（3）日志配置文件</h3><p><img src=\"http://img.blog.csdn.net/20170208125206387?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU2xvd19XYWtsZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"></p></div><div id=\"wmd-preview-section-29\"><pre><code>### 设置Logger输出级别和输出目的地 ###\nlog4j.rootLogger=debug,stdout,logfile\n\n### 把日志信息输出到控制台 ###\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\n#log4j.appender.stdout.Target=System.err\nlog4j.appender.stdout.layout=org.apache.log4j.SimpleLayout\n\n### 把日志信息输出到文件：jbit.log ###\nlog4j.appender.logfile=org.apache.log4j.FileAppender\nlog4j.appender.logfile.File=jbit.log\nlog4j.appender.logfile.layout=org.apache.log4j.PatternLayout\nlog4j.appender.logfile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %F %p %m%n\n\n###显示SQL语句部分\nlog4j.logger.com.ibatis=DEBUG\nlog4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUG\nlog4j.logger.com.ibatis.common.jdbc.ScriptRunner=DEBUG\nlog4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUG\nlog4j.logger.java.sql.Connection=DEBUG\nlog4j.logger.java.sql.Statement=DEBUG\nlog4j.logger.java.sql.PreparedStatement=DEBUG</code></pre></div><div id=\"wmd-preview-section-30\"><h3 id=\"4mybatis配置文件mybatiscfgxml\">（4）MyBatis配置文件mybatis.cfg.xml</h3><p><img src=\"http://img.blog.csdn.net/20170208125408076?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU2xvd19XYWtsZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\">&nbsp;<br><img src=\"http://img.blog.csdn.net/20170208125434623?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU2xvd19XYWtsZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"></p></div><div id=\"wmd-preview-section-31\"><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;\n&lt;configuration&gt;\n\n    &lt;!-- 引入外部配置文件 --&gt;\n    &lt;properties resource=\"mysql.properties\"&gt;&lt;/properties&gt;\n\n\n    &lt;!-- 配置mybatis运行环境 --&gt;\n    &lt;environments default=\"zzbatis\"&gt;\n        &lt;environment id=\"zzbatis\"&gt;\n            &lt;!-- type=\"JDBC\" 代表使用JDBC的提交和回滚来管理事务 --&gt;\n            &lt;transactionManager type=\"JDBC\" /&gt;\n\n            &lt;!-- mybatis提供了3种数据源类型，分别是：POOLED,UNPOOLED,JNDI --&gt;\n            &lt;!-- POOLED 表示支持JDBC数据源连接池 --&gt;\n            &lt;!-- UNPOOLED 表示不支持数据源连接池 --&gt;\n            &lt;!-- JNDI 表示支持外部数据源连接池 --&gt;\n            &lt;dataSource type=\"POOLED\"&gt;\n                &lt;property name=\"driver\" value=\"${jdbc.driver}\" /&gt;\n                &lt;property name=\"url\" value=\"${jdbc.url}\" /&gt;\n                &lt;property name=\"username\" value=\"${jdbc.username}\" /&gt;\n                &lt;property name=\"password\" value=\"${jdbc.password}\" /&gt;\n            &lt;/dataSource&gt;\n        &lt;/environment&gt;\n    &lt;/environments&gt;\n\n\n&lt;/configuration&gt;</code></pre></div><div id=\"wmd-preview-section-32\"><h3 id=\"5创建对应的实体对象userbean\">（5）创建对应的实体对象UserBean</h3><p><img src=\"http://img.blog.csdn.net/20170208140844846?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU2xvd19XYWtsZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"></p></div><div id=\"wmd-preview-section-33\"><pre><code>package com.zz.mybatis.beans;\n\nimport java.io.Serializable;\n\npublic class UserBean implements Serializable{\n\n    private static final long serialVersionUID = 1L;\n    private Integer id;\n    private String username;\n    private String password;\n    private Double account;\n\n    public UserBean() {\n        super();\n    }\n\n    public UserBean(String username, String password, Double account) {\n        super();\n        this.username = username;\n        this.password = password;\n        this.account = account;\n    }\n\n    public UserBean(Integer id, String username, String password, Double account) {\n        super();\n        this.id = id;\n        this.username = username;\n        this.password = password;\n        this.account = account;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public Double getAccount() {\n        return account;\n    }\n\n    public void setAccount(Double account) {\n        this.account = account;\n    }\n\n    @Override\n    public String toString() {\n        return \"UserBean [id=\" + id + \", username=\" + username + \", password=\"\n                + password + \", account=\" + account + \"]\";\n    }\n\n}\n</code></pre></div><div id=\"wmd-preview-section-34\"><h3 id=\"6创建方法接口usermapperjava和定义操作tuser表的sql映射文件usermapperxml\">（6）创建方法接口UserMapper.java和定义操作t_user表的sql映射文件UserMapper.xml</h3><p><img src=\"http://img.blog.csdn.net/20170208141459069?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU2xvd19XYWtsZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\">&nbsp;<br>UserMapper.java</p></div><div id=\"wmd-preview-section-35\"><pre><code>package com.zz.mybatis.mapper;\n\nimport java.util.List;\n\nimport com.zz.mybatis.beans.UserBean;\n\npublic interface UserMapper {\n    /**\n     * 新增用戶\n     * @param user\n     * @return\n     * @throws Exception\n     */\n    public int insertUser(UserBean user) throws Exception;\n    /**\n     * 修改用戶\n     * @param user\n     * @param id\n     * @return\n     * @throws Exception\n     */\n    public int updateUser (UserBean user,int id) throws Exception;\n    /**\n     * 刪除用戶\n     * @param id\n     * @return\n     * @throws Exception\n     */\n    public int deleteUser(int id) throws Exception;\n    /**\n     * 根据id查询用户信息\n     * @param id\n     * @return\n     * @throws Exception\n     */\n    public UserBean selectUserById(int id) throws Exception;\n    /**\n     * 查询所有的用户信息\n     * @return\n     * @throws Exception\n     */\n    public List&lt;UserBean&gt; selectAllUser() throws Exception;\n}\n</code></pre><p><img src=\"http://img.blog.csdn.net/20170208141206317?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU2xvd19XYWtsZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"><br>UserMapper.xml</p></div><div id=\"wmd-preview-section-36\"><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org/DTD Mapper 3.0\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n&lt;mapper namespace=\"com.zz.mybatis.mapper.UserMapper\"&gt;\n    &lt;!-- 自定义返回结果集 --&gt;\n    &lt;resultMap id=\"userMap\" type=\"UserBean\"&gt;\n        &lt;id property=\"id\" column=\"id\" javaType=\"java.lang.Integer\"&gt;&lt;/id&gt;\n        &lt;result property=\"username\" column=\"username\" javaType=\"java.lang.String\"&gt;&lt;/result&gt;\n        &lt;result property=\"password\" column=\"password\" javaType=\"java.lang.String\"&gt;&lt;/result&gt;\n        &lt;result property=\"account\" column=\"account\" javaType=\"java.lang.Double\"&gt;&lt;/result&gt;\n    &lt;/resultMap&gt;\n    &lt;!-- 在各种标签中的id属性必须和接口中的方法名相同 ， id属性值必须是唯一的，不能够重复使用。parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型--&gt;\n    &lt;!-- useGeneratedKeys：（ 仅 对 insert 有 用 ） 这 会 告 诉 MyBatis 使 用 JDBC 的getGeneratedKeys\n                方法来取出由数据（比如：像 MySQL 和 SQLServer 这样的数据库管理系统的自动递增字段）内部生成的主键。默认值： false。 --&gt;\n    &lt;!--keyProperty： （仅对 insert有用）标记一个属性， MyBatis 会通过 getGeneratedKeys或者通过 insert 语句的 selectKey 子元素设置它的值。默认：不设置。 --&gt;\n    &lt;!--#{}中的内容，为占位符，当参数为某个JavaBean时，表示放置该Bean对象的属性值  --&gt;\n\n\n    &lt;insert id=\"insertUser\" useGeneratedKeys=\"true\" keyProperty=\"id\"&gt;\n        insert into t_user (username,password,account) values (#{username},#{password},#{account})\n    &lt;/insert&gt;\n\n    &lt;update id=\"updateUser\" &gt;\n        update t_user set username=#{username},password=#{password},account=#{account} where id=#{id}\n    &lt;/update&gt;\n\n    &lt;delete id=\"deleteUser\" parameterType=\"int\"&gt;\n        delete from t_user where id=#{id}\n    &lt;/delete&gt;\n\n    &lt;select id=\"selectUserById\" parameterType=\"int\" resultMap=\"userMap\"&gt;\n        select * from t_user where id=#{id}\n    &lt;/select&gt;\n\n    &lt;select id=\"selectAllUser\" resultMap=\"userMap\"&gt;\n        select * from t_user\n    &lt;/select&gt;\n\n\n&lt;/mapper&gt;</code></pre><p>mybatis.cfg.xml里注册UserMapper.xml文件</p></div><div id=\"wmd-preview-section-37\"><pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;\n&lt;configuration&gt;\n\n    &lt;!-- 引入外部配置文件 --&gt;\n    &lt;properties resource=\"mysql.properties\"&gt;&lt;/properties&gt;\n\n    &lt;!-- 为JAVA Bean起类别名 --&gt;\n    &lt;typeAliases &gt;\n        &lt;!-- 别名方式1，一个一个的配置 type中放置的是类的全路径，alias中放置的是类别名\n        &lt;typeAliase type=\"com.zz.mybatis.beans.UserBean\" alias=\"UserBean\"/&gt; --&gt;\n        &lt;!-- 别名方式2，自动扫描，将JAVA类的类名作为类的类别名 --&gt;\n        &lt;package name=\"com.zz.mybatis.beans\"/&gt;\n    &lt;/typeAliases&gt;\n\n    &lt;!-- 配置mybatis运行环境 --&gt;\n    &lt;environments default=\"zzbatis\"&gt;\n        &lt;environment id=\"zzbatis\"&gt;\n            &lt;!-- type=\"JDBC\" 代表使用JDBC的提交和回滚来管理事务 --&gt;\n            &lt;transactionManager type=\"JDBC\" /&gt;\n\n            &lt;!-- mybatis提供了3种数据源类型，分别是：POOLED,UNPOOLED,JNDI --&gt;\n            &lt;!-- POOLED 表示支持JDBC数据源连接池 --&gt;\n            &lt;!-- UNPOOLED 表示不支持数据源连接池 --&gt;\n            &lt;!-- JNDI 表示支持外部数据源连接池 --&gt;\n            &lt;dataSource type=\"POOLED\"&gt;\n                &lt;property name=\"driver\" value=\"${jdbc.driver}\" /&gt;\n                &lt;property name=\"url\" value=\"${jdbc.url}\" /&gt;\n                &lt;property name=\"username\" value=\"${jdbc.username}\" /&gt;\n                &lt;property name=\"password\" value=\"${jdbc.password}\" /&gt;\n            &lt;/dataSource&gt;\n        &lt;/environment&gt;\n    &lt;/environments&gt;\n\n    &lt;mappers&gt;\n        &lt;!-- 告知映射文件方式1，一个一个的配置\n        &lt;mapper resource=\"com/zz/mybatis/mapper/UserMapper.xml\"/&gt;--&gt;\n        &lt;!-- 告知映射文件方式2，自动扫描包内的Mapper接口与配置文件 --&gt;\n        &lt;package name=\"com/zz/mybatis/mapper\"/&gt;\n    &lt;/mappers&gt;\n\n&lt;/configuration&gt;</code></pre></div><div id=\"wmd-preview-section-38\"><h3 id=\"7建立一个工具类dbtools\">（7）建立一个工具类DBTools</h3><p><img src=\"http://img.blog.csdn.net/20170208141608058?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU2xvd19XYWtsZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\">&nbsp;<br>DBTools.java：</p></div><div id=\"wmd-preview-section-39\"><pre><code>package com.zz.mybatis.tools;\n\nimport java.io.Reader;\n\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\npublic class DBTools {\n    public static SqlSessionFactory sessionFactory;\n\n    static{\n        try {\n            //使用MyBatis提供的Resources类加载mybatis的配置文件\n            Reader reader = Resources.getResourceAsReader(\"mybatis.cfg.xml\");\n            //构建sqlSession的工厂\n            sessionFactory = new SqlSessionFactoryBuilder().build(reader);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n    //创建能执行映射文件中sql的sqlSession\n    public static SqlSession getSession(){\n        return sessionFactory.openSession();\n    }\n\n}\n</code></pre></div><div id=\"wmd-preview-section-40\"><h3 id=\"8测试\">（8）测试</h3><p>参考：<a href=\"http://blog.csdn.net/slow_wakler/article/details/54844944\">IntelliJ IDEA单元测试入门</a>&nbsp;<br><img src=\"http://img.blog.csdn.net/20170208143007891?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU2xvd19XYWtsZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\">&nbsp;<br>UserServiceTest：</p></div><div id=\"wmd-preview-section-41\"><pre><code>package com.zz.mybatis.service;\n\nimport com.zz.mybatis.beans.UserBean;\nimport com.zz.mybatis.mapper.UserMapper;\nimport com.zz.mybatis.tools.DBTools;\nimport org.apache.ibatis.session.SqlSession;\nimport org.junit.Test;\n\nimport java.util.List;\n\nimport static org.junit.Assert.*;\n\npublic class UserServiceTest {\n    @Test\n    public void insertUser() throws Exception {\n        SqlSession session = DBTools.getSession();\n        UserMapper mapper = session.getMapper(UserMapper.class);\n        UserBean user = new UserBean(\"咖啡\", \"1314520\", 7000.0);\n        try {\n            mapper.insertUser(user);\n            System.out.println(user.toString());\n            session.commit();\n        } catch (Exception e) {\n            e.printStackTrace();\n            session.rollback();\n        }\n    }\n\n    @Test\n    public void deleteUser() throws Exception {\n        SqlSession session=DBTools.getSession();\n        UserMapper mapper=session.getMapper(UserMapper.class);\n        try {\n            mapper.deleteUser(1);\n            session.commit();\n        } catch (Exception e) {\n            e.printStackTrace();\n            session.rollback();\n        }\n    }\n\n    @Test\n    public void selectUserById() throws Exception {\n        SqlSession session=DBTools.getSession();\n        UserMapper mapper=session.getMapper(UserMapper.class);\n        try {\n            UserBean user=    mapper.selectUserById(2);\n            System.out.println(user.toString());\n\n            session.commit();\n        } catch (Exception e) {\n            e.printStackTrace();\n            session.rollback();\n        }\n    }\n\n    @Test\n    public void selectAllUser() throws Exception {\n        SqlSession session=DBTools.getSession();\n        UserMapper mapper=session.getMapper(UserMapper.class);\n        try {\n            List&lt;UserBean&gt; user=mapper.selectAllUser();\n            System.out.println(user.toString());\n            session.commit();\n        } catch (Exception e) {\n            e.printStackTrace();\n            session.rollback();\n        }\n    }\n\n}</code></pre><p><img src=\"http://img.blog.csdn.net/20170208143113342?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU2xvd19XYWtsZXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\" title=\"\"></p></div><div id=\"wmd-preview-section-footnotes\"></div></div></div></div></div><div><div title=\"这里可以拖拽\"><i></i></div><div></div><div><button title=\"标题列表\" data-toggle=\"dropdown\"><i></i></button></div><div><button title=\"统计信息\" data-toggle=\"dropdown\"><i></i>&nbsp;8793</button></div></div></div></div></div><div><div><button title=\"发布\"><i></i></button><button title=\"保存\"><i></i></button><a title=\"返回\" href=\"http://mp.blog.csdn.net/\"><i></i></a></div></div></div></main><div><input type=\"text\" value=\"\" id=\"focus_retriever\" readonly=\"true\"></div><p><input tabindex=\"-1\">&nbsp;&nbsp;<br></p>', '参考（1）使用IDEA创建javaweb项目&nbsp;（2）MyBatis学习笔记(一）入门（重点）&nbsp;（3）IntelliJ IDEA手动配置连接MySQL数据库&nbsp;（4）IntelliJ IDEA单元测试入门创建Java Web项目参考：使用IDEA创建javaweb项目&nbsp;导入MyBatis所需的jar包参考：MyBatis学习笔记(一）入门&nbsp;mybatis需要jar包：mybatis-3.4.2.jar&nbsp;mysql驱动jar包：mysql-connector-java-5.1.39-bin.jar&nbsp;日志记录jar包：log4j-1.2.17.jar，slf4j-api-1.7.12.jar，slf4j-log4j12-1.7.12.jar&nbsp;创建数据库mybatis和表t_userIDEA配置MySQL数据源参考：IntelliJ IDEA手动配置连接MySQL数据库&nbsp;&nbsp;点击Test Connection&nbsp;点击OK后，可以看到&nbsp;MyBatis入门Demo参考：MyBatis学习笔记(一）入门（1）代码结构（2）mysql驱动配置文件jdbc.driver=com.mysql.jdbc.Driver\njdbc.url=jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=UTF-8\njdbc.username=root\njdbc.password=123456（3）日志配置文件### 设置Logger输出级别和输出目的地 ###\nlog4j.rootLogger=debug,stdout,logfile\n\n### 把日志信息输出到控制台 ###\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\n#log4j.appender.stdout.Target=System.err\nlog4j.appender.stdout.layout=org.apache.log4j.SimpleLayout\n\n### 把日志信息输出到文件：jbit.log ###\nlog4j.appender.logfile=org.apache.log4j.FileAppender\nlog4j.appender.logfile.File=jbit.log\nlog4j.appender.logfile.layout=org.apache.log4j.PatternLayout\nlog4j.appender.logfile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %F %p %m%n\n\n###显示SQL语句部分\nlog4j.logger.com.ibatis=DEBUG\nlog4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUG\nlog4j.logger.com.ibatis.common.jdbc.ScriptRunner=DEBUG\nlog4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUG\nlog4j.logger.java.sql.Connection=DEBUG\nlog4j.logger.java.sql.Statement=DEBUG\nlog4j.logger.java.sql.PreparedStatement=DEBUG（4）MyBatis配置文件mybatis.cfg.xml&nbsp;&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;\n&lt;configuration&gt;\n\n    &lt;!-- 引入外部配置文件 --&gt;\n    &lt;properties resource=\"mysql.properties\"&gt;&lt;/properties&gt;\n\n\n    &lt;!-- 配置mybatis运行环境 --&gt;\n    &lt;environments default=\"zzbatis\"&gt;\n        &lt;environment id=\"zzbatis\"&gt;\n            &lt;!-- type=\"JDBC\" 代表使用JDBC的提交和回滚来管理事务 --&gt;\n            &lt;transactionManager type=\"JDBC\" /&gt;\n\n            &lt;!-- mybatis提供了3种数据源类型，分别是：POOLED,UNPOOLED,JNDI --&gt;\n            &lt;!-- POOLED 表示支持JDBC数据源连接池 --&gt;\n            &lt;!-- UNPOOLED 表示不支持数据源连接池 --&gt;\n            &lt;!-- JNDI 表示支持外部数据源连接池 --&gt;\n            &lt;dataSource type=\"POOLED\"&gt;\n                &lt;property name=\"driver\" value=\"${jdbc.driver}\" /&gt;\n                &lt;property name=\"url\" value=\"${jdbc.url}\" /&gt;\n                &lt;property name=\"username\" value=\"${jdbc.username}\" /&gt;\n                &lt;property name=\"password\" value=\"${jdbc.password}\" /&gt;\n            &lt;/dataSource&gt;\n        &lt;/environment&gt;\n    &lt;/environments&gt;\n\n\n&lt;/configuration&gt;（5）创建对应的实体对象UserBeanpackage com.zz.mybatis.beans;\n\nimport java.io.Serializable;\n\npublic class UserBean implements Serializable{\n\n    private static final long serialVersionUID = 1L;\n    private Integer id;\n    private String username;\n    private String password;\n    private Double account;\n\n    public UserBean() {\n        super();\n    }\n\n    public UserBean(String username, String password, Double account) {\n        super();\n        this.username = username;\n        this.password = password;\n        this.account = account;\n    }\n\n    public UserBean(Integer id, String username, String password, Double account) {\n        super();\n        this.id = id;\n        this.username = username;\n        this.password = password;\n        this.account = account;\n    }\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public Double getAccount() {\n        return account;\n    }\n\n    public void setAccount(Double account) {\n        this.account = account;\n    }\n\n    @Override\n    public String toString() {\n        return \"UserBean [id=\" + id + \", username=\" + username + \", password=\"\n                + password + \", account=\" + account + \"]\";\n    }\n\n}\n（6）创建方法接口UserMapper.java和定义操作t_user表的sql映射文件UserMapper.xml&nbsp;UserMapper.javapackage com.zz.mybatis.mapper;\n\nimport java.util.List;\n\nimport com.zz.mybatis.beans.UserBean;\n\npublic interface UserMapper {\n    /**\n     * 新增用戶\n     * @param user\n     * @return\n     * @throws Exception\n     */\n    public int insertUser(UserBean user) throws Exception;\n    /**\n     * 修改用戶\n     * @param user\n     * @param id\n     * @return\n     * @throws Exception\n     */\n    public int updateUser (UserBean user,int id) throws Exception;\n    /**\n     * 刪除用戶\n     * @param id\n     * @return\n     * @throws Exception\n     */\n    public int deleteUser(int id) throws Exception;\n    /**\n     * 根据id查询用户信息\n     * @param id\n     * @return\n     * @throws Exception\n     */\n    public UserBean selectUserById(int id) throws Exception;\n    /**\n     * 查询所有的用户信息\n     * @return\n     * @throws Exception\n     */\n    public List&lt;UserBean&gt; selectAllUser() throws Exception;\n}\nUserMapper.xml&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org/DTD Mapper 3.0\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;\n&lt;mapper namespace=\"com.zz.mybatis.mapper.UserMapper\"&gt;\n    &lt;!-- 自定义返回结果集 --&gt;\n    &lt;resultMap id=\"userMap\" type=\"UserBean\"&gt;\n        &lt;id property=\"id\" column=\"id\" javaType=\"java.lang.Integer\"&gt;&lt;/id&gt;\n        &lt;result property=\"username\" column=\"username\" javaType=\"java.lang.String\"&gt;&lt;/result&gt;\n        &lt;result property=\"password\" column=\"password\" javaType=\"java.lang.String\"&gt;&lt;/result&gt;\n        &lt;result property=\"account\" column=\"account\" javaType=\"java.lang.Double\"&gt;&lt;/result&gt;\n    &lt;/resultMap&gt;\n    &lt;!-- 在各种标签中的id属性必须和接口中的方法名相同 ， id属性值必须是唯一的，不能够重复使用。parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型--&gt;\n    &lt;!-- useGeneratedKeys：（ 仅 对 insert 有 用 ） 这 会 告 诉 MyBatis 使 用 JDBC 的getGeneratedKeys\n                方法来取出由数据（比如：像 MySQL 和 SQLServer 这样的数据库管理系统的自动递增字段）内部生成的主键。默认值： false。 --&gt;\n    &lt;!--keyProperty： （仅对 insert有用）标记一个属性， MyBatis 会通过 getGeneratedKeys或者通过 insert 语句的 selectKey 子元素设置它的值。默认：不设置。 --&gt;\n    &lt;!--#{}中的内容，为占位符，当参数为某个JavaBean时，表示放置该Bean对象的属性值  --&gt;\n\n\n    &lt;insert id=\"insertUser\" useGeneratedKeys=\"true\" keyProperty=\"id\"&gt;\n        insert into t_user (username,password,account) values (#{username},#{password},#{account})\n    &lt;/insert&gt;\n\n    &lt;update id=\"updateUser\" &gt;\n        update t_user set username=#{username},password=#{password},account=#{account} where id=#{id}\n    &lt;/update&gt;\n\n    &lt;delete id=\"deleteUser\" parameterType=\"int\"&gt;\n        delete from t_user where id=#{id}\n    &lt;/delete&gt;\n\n    &lt;select id=\"selectUserById\" parameterType=\"int\" resultMap=\"userMap\"&gt;\n        select * from t_user where id=#{id}\n    &lt;/select&gt;\n\n    &lt;select id=\"selectAllUser\" resultMap=\"userMap\"&gt;\n        select * from t_user\n    &lt;/select&gt;\n\n\n&lt;/mapper&gt;mybatis.cfg.xml里注册UserMapper.xml文件&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;\n&lt;configuration&gt;\n\n    &lt;!-- 引入外部配置文件 --&gt;\n    &lt;properties resource=\"mysql.properties\"&gt;&lt;/properties&gt;\n\n    &lt;!-- 为JAVA Bean起类别名 --&gt;\n    &lt;typeAliases &gt;\n        &lt;!-- 别名方式1，一个一个的配置 type中放置的是类的全路径，alias中放置的是类别名\n        &lt;typeAliase type=\"com.zz.mybatis.beans.UserBean\" alias=\"UserBean\"/&gt; --&gt;\n        &lt;!-- 别名方式2，自动扫描，将JAVA类的类名作为类的类别名 --&gt;\n        &lt;package name=\"com.zz.mybatis.beans\"/&gt;\n    &lt;/typeAliases&gt;\n\n    &lt;!-- 配置mybatis运行环境 --&gt;\n    &lt;environments default=\"zzbatis\"&gt;\n        &lt;environment id=\"zzbatis\"&gt;\n            &lt;!-- type=\"JDBC\" 代表使用JDBC的提交和回滚来管理事务 --&gt;\n            &lt;transactionManager type=\"JDBC\" /&gt;\n\n            &lt;!-- mybatis提供了3种数据源类型，分别是：POOLED,UNPOOLED,JNDI --&gt;\n            &lt;!-- POOLED 表示支持JDBC数据源连接池 --&gt;\n            &lt;!-- UNPOOLED 表示不支持数据源连接池 --&gt;\n            &lt;!-- JNDI 表示支持外部数据源连接池 --&gt;\n            &lt;dataSource type=\"POOLED\"&gt;\n                &lt;property name=\"driver\" value=\"${jdbc.driver}\" /&gt;\n                &lt;property name=\"url\" value=\"${jdbc.url}\" /&gt;\n                &lt;property name=\"username\" value=\"${jdbc.username}\" /&gt;\n                &lt;property name=\"password\" value=\"${jdbc.password}\" /&gt;\n            &lt;/dataSource&gt;\n        &lt;/environment&gt;\n    &lt;/environments&gt;\n\n    &lt;mappers&gt;\n        &lt;!-- 告知映射文件方式1，一个一个的配置\n        &lt;mapper resource=\"com/zz/mybatis/mapper/UserMapper.xml\"/&gt;--&gt;\n        &lt;!-- 告知映射文件方式2，自动扫描包内的Mapper接口与配置文件 --&gt;\n        &lt;package name=\"com/zz/mybatis/mapper\"/&gt;\n    &lt;/mappers&gt;\n\n&lt;/configuration&gt;（7）建立一个工具类DBTools&nbsp;DBTools.java：package com.zz.mybatis.tools;\n\nimport java.io.Reader;\n\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\npublic class DBTools {\n    public static SqlSessionFactory sessionFactory;\n\n    static{\n        try {\n            //使用MyBatis提供的Resources类加载mybatis的配置文件\n            Reader reader = Resources.getResourceAsReader(\"mybatis.cfg.xml\");\n            //构建sqlSession的工厂\n            sessionFactory = new SqlSessionFactoryBuilder().build(reader);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    }\n    //创建能执行映射文件中sql的sqlSession\n    public static SqlSession getSession(){\n        return sessionFactory.openSession();\n    }\n\n}\n（8）测试参考：IntelliJ IDEA单元测试入门&nbsp;&nbsp;UserServiceTest：package com.zz.mybatis.service;\n\nimport com.zz.mybatis.beans.UserBean;\nimport com.zz.mybatis.mapper.UserMapper;\nimport com.zz.mybatis.tools.DBTools;\nimport org.apache.ibatis.session.SqlSession;\nimport org.junit.Test;\n\nimport java.util.List;\n\nimport static org.junit.Assert.*;\n\npublic class UserServiceTest {\n    @Test\n    public void insertUser() throws Exception {\n        SqlSession session = DBTools.getSession();\n        UserMapper mapper = session.getMapper(UserMapper.class);\n        UserBean user = new UserBean(\"咖啡\", \"1314520\", 7000.0);\n        try {\n            mapper.insertUser(user);\n            System.out.println(user.toString());\n            session.commit();\n        } catch (Exception e) {\n            e.printStackTrace();\n            session.rollback();\n        }\n    }\n\n    @Test\n    public void deleteUser() throws Exception {\n        SqlSession session=DBTools.getSession();\n        UserMapper mapper=session.getMapper(UserMapper.class);\n        try {\n            mapper.deleteUser(1);\n            session.commit();\n        } catch (Exception e) {\n            e.printStackTrace();\n            session.rollback();\n        }\n    }\n\n    @Test\n    public void selectUserById() throws Exception {\n        SqlSession session=DBTools.getSession();\n        UserMapper mapper=session.getMapper(UserMapper.class);\n        try {\n            UserBean user=    mapper.selectUserById(2);\n            System.out.println(user.toString());\n\n            session.commit();\n        } catch (Exception e) {\n            e.printStackTrace();\n            session.rollback();\n        }\n    }\n\n    @Test\n    public void selectAllUser() throws Exception {\n        SqlSession session=DBTools.getSession();\n        UserMapper mapper=session.getMapper(UserMapper.class);\n        try {\n            List&lt;UserBean&gt; user=mapper.selectAllUser();\n            System.out.println(user.toString());\n            session.commit();\n        } catch (Exception e) {\n            e.printStackTrace();\n            session.rollback();\n        }\n    }\n\n}&nbsp;8793&nbsp;&nbsp;', '2018-03-03 14:27:25', '2018-03-03 21:21:34', '2018-03-03 21:21:35', '1', 'MyBatis学习笔记（一）IntelliJ IDEA的第一个MyBatis Demo');

-- ----------------------------
-- Table structure for t_penguin_question
-- ----------------------------
DROP TABLE IF EXISTS `t_penguin_question`;
CREATE TABLE `t_penguin_question` (
  `id` int(8) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '题目标题',
  `content` text COLLATE utf8mb4_unicode_ci COMMENT '题目内容',
  `question_type` int(8) DEFAULT NULL COMMENT '题目类型,0表示单项选择题,1表示多项选择题,2表示问答题,3表示编程题',
  `option_a` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '选项A',
  `option_b` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '选项B',
  `option_c` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '选项C',
  `option_d` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '选项D',
  `answer` text COLLATE utf8mb4_unicode_ci COMMENT '答案',
  `parse` text COLLATE utf8mb4_unicode_ci COMMENT '答案解析',
  `subject_id` int(8) DEFAULT NULL COMMENT '学科ID',
  `contest_id` int(8) DEFAULT NULL COMMENT '试卷ID',
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `score` int(8) DEFAULT NULL COMMENT '题目分值',
  `difficulty` int(8) DEFAULT '1' COMMENT '题目难度',
  `state` int(8) DEFAULT '1' COMMENT '0表示未考试题目,1表示已考试题目',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of t_penguin_question
-- ----------------------------
INSERT INTO `t_penguin_question` VALUES ('4', '下列哪一个 Transact-SQL 语句能够实现收回 user2 查询基本表 T 的权限？（ ）', '下列哪一个 Transact-SQL 语句能够实现收回 user2 查询基本表 T 的权限？（ ）', '0', 'REVOKE UPDATE ON T', 'GRANT SELECT ON T TO user2', 'DENY SELECT ON T TO user2', 'REVOKE SELECT ON T FROM user2', 'D', 'DENY：在安全系统中创建一项，以拒绝给当前数据库内的安全帐户授予权限并防止安全帐户通过其组或角色成员资格继承权限。\nREVOKE：删除以前在当前数据库内的用户上授予或拒绝的权限。', '8', '4', '2018-02-18 12:02:35', '2018-04-02 17:40:55', '5', '1', '1');
INSERT INTO `t_penguin_question` VALUES ('5', '用如下的 SQL 语句创建一个 s 表  CREATE  TABLE  s （ NO  CHAR （ 4 ） primary key ，  NAME  CHAR （ 8 ） NOT  NULL ，  SEX  CHAR （ 2 ），  AGE  INT ）  那么可以插入到该表中的数据是（ ）', '用如下的 SQL 语句创建一个 s 表\n\nCREATE  TABLE  s （ NO  CHAR （ 4 ） primary key ，\n\nNAME  CHAR （ 8 ） NOT  NULL ，\n\nSEX  CHAR （ 2 ），\n\nAGE  INT ）\n\n那么可以插入到该表中的数据是（ ）', '0', '（’1031’，’曾华’，NULL，NULL）', '（’1032’，’曾华’，男，23）', '（NULL，’曾华’，’男’，’23’）', '（’1033’，NULL，’男’，23）', 'A', '主键和NAME不能为空，所以C和D排除，插入char类型时要加单引号，插入int不用加单引号，综合，A对', '8', '4', '2018-02-18 20:17:06', '2018-04-02 17:40:55', '5', '4', '1');
INSERT INTO `t_penguin_question` VALUES ('6', '数据库管理系统的工作不包括？（）', '数据库管理系统的工作不包括？（）', '0', '定义数据库', '对已定义的数据库进行管理', '为定义的数据库提供操作系统', '数据通信', 'C', '略', '8', '4', '2018-02-20 16:38:46', '2018-04-02 17:40:55', '5', '1', '1');
INSERT INTO `t_penguin_question` VALUES ('7', '在关系数据库设计中，设计关系模式（二维表）是数据库设计中哪个阶段的任务。（）', '在关系数据库设计中，设计关系模式（二维表）是数据库设计中哪个阶段的任务。（）', '0', '逻辑设计阶段', '概念设计阶段', '物理设计阶段', '需求分析阶段', 'A', '逻辑设计的目的是从概念模型导出特定的DBMS可以处理的数据库的逻辑结构(数据库的模式和外模式)。在关系数据库设计中，设计关系模式是在数据库的逻辑设计阶段。', '8', '4', '2018-02-20 18:00:48', '2018-04-02 17:40:55', '5', '1', '1');
INSERT INTO `t_penguin_question` VALUES ('8', '（） 是存储在计算机内有结构的数据的集合。', '（） 是存储在计算机内有结构的数据的集合。', '0', '数据库系统', '数据库', '数据库管理系统', '数据结构', 'B', '1、数据库系统（Database System）是由数据库及其管理软件组成的系统。\n\n2、数据库(Database)是按照数据结构来组织、存储和管理数据的建立在计算机存储设备上的仓库。\n\n3、数据库管理系统(Database Management System)是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，简称DBMS。\n\n4、数据结构是计算机存储、组织数据的方式。', '8', '4', '2018-02-20 18:27:38', '2018-04-02 17:40:55', '5', '1', '1');
INSERT INTO `t_penguin_question` VALUES ('9', '层次型、网状型和关系型数据库划分原则是。 （）', '层次型、网状型和关系型数据库划分原则是。 （）', '0', '记录长度', '文件的大小', '联系的复杂程度', '数据之间的联系', 'D', '略', '8', '4', '2018-02-20 18:29:42', '2018-04-02 17:40:55', '5', '1', '1');
INSERT INTO `t_penguin_question` VALUES ('10', '实体是信息世界中的术语，与之对应的数据库术语为。 （）', '实体是信息世界中的术语，与之对应的数据库术语为。 （）', '0', '文件', '数据库', '字段', '记录', 'D', '略', '8', '4', '2018-02-20 18:32:05', '2018-04-02 17:40:55', '5', '1', '1');
INSERT INTO `t_penguin_question` VALUES ('11', '表 test1 中包含两列： c1 为整型， c2 为 8 位长的字符串类型，使用如下语句创建视图......', '表 test1 中包含两列： c1 为整型， c2 为 8 位长的字符串类型，使用如下语句创建视图：\n\nCREATE VIEW v1 AS SELECT c1,c2 FROM test1 WHERE c1>30 WITH CHECK OPTION\n\n以下语句能够成功执行的有几条？ （ ）\n\nINSERT INTO v1 VALUES(1, \' 赵六 \')\n\nINSERT INTO v1 VALUES(101, \' 李四 \')\n\nINSERT INTO t1 VALUES(20, \' 王五 \')', '0', '0', '1', '2', '3', 'C', '略', '8', '4', '2018-02-20 18:36:14', '2018-04-02 17:40:55', '5', '1', '1');
INSERT INTO `t_penguin_question` VALUES ('12', '简述关系模型的三类完整性约束。', '简述关系模型的三类完整性约束。', '2', null, null, null, null, '1. 实体完整性约束 要求候选码非空且唯一。\r\n\r\n2. 参照完整性约束 要求外码要么取空值要么所取的值在对应的候选码中出现。\r\n\r\n3. 用户自定义完整性。包括非空约束，唯一约束，检查约束，缺省值约束等。', '1. 实体完整性约束 要求候选码非空且唯一。\r\n\r\n2. 参照完整性约束 要求外码要么取空值要么所取的值在对应的候选码中出现。\r\n\r\n3. 用户自定义完整性。包括非空约束，唯一约束，检查约束，缺省值约束等。', '8', '4', '2018-02-20 18:38:10', '2018-04-02 17:40:55', '20', '1', '1');
INSERT INTO `t_penguin_question` VALUES ('13', '如果对数据库的并发性不加以任何控制，可能造成哪些不良现象？怎样控制才能防止这些现象的产生？', '如果对数据库的并发性不加以任何控制，可能造成哪些不良现象？怎样控制才能防止这些现象的产生？', '2', null, null, null, null, '1. 丢失修改\r\n\r\n2. 读“脏”数据\r\n\r\n3. 不可重复读\r\n\r\n通过基于锁的协议实现对事务并发控制。', '1. 丢失修改\r\n\r\n2. 读“脏”数据\r\n\r\n3. 不可重复读\r\n\r\n通过基于锁的协议实现对事务并发控制。', '8', '4', '2018-02-20 18:47:11', '2018-04-02 17:40:55', '20', '1', '1');
INSERT INTO `t_penguin_question` VALUES ('14', '简述三级封锁协议及其解决的事务并发执行的问题。', '简述三级封锁协议及其解决的事务并发执行的问题。', '2', null, null, null, null, '\n\n一级封锁协议：对对象加写锁，直到事物结束时才释放写锁。\n\n二级封锁协议：在一级封锁协议的基础上，给事物加读锁，读完后立即释放读锁。\n\n三级封锁协议：在一级封锁协议的基础上，给事务加锁，知道事物结束释放。', '\n\n一级封锁协议：对对象加写锁，直到事物结束时才释放写锁。\n\n二级封锁协议：在一级封锁协议的基础上，给事物加读锁，读完后立即释放读锁。\n\n三级封锁协议：在一级封锁协议的基础上，给事务加锁，知道事物结束释放。', '8', '4', '2018-02-20 18:48:31', '2018-04-02 17:40:55', '20', '1', '1');

-- ----------------------------
-- Table structure for t_penguin_reply
-- ----------------------------
DROP TABLE IF EXISTS `t_penguin_reply`;
CREATE TABLE `t_penguin_reply` (
  `id` int(8) NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `user_id` int(8) DEFAULT NULL COMMENT '用户id',
  `atuser_id` int(8) DEFAULT NULL COMMENT '被回复用户id',
  `post_id` int(8) DEFAULT NULL COMMENT '帖子id',
  `comment_id` int(8) DEFAULT NULL COMMENT '评论id',
  `content` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '内容',
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of t_penguin_reply
-- ----------------------------
INSERT INTO `t_penguin_reply` VALUES ('1', '2', '0', '6', '1', '厉害了', '2018-03-03 20:55:55');
INSERT INTO `t_penguin_reply` VALUES ('2', '2', '0', '6', '1', '老厉害了', '2018-03-03 21:01:07');
INSERT INTO `t_penguin_reply` VALUES ('3', '1', '2', '6', '1', '哈哈', '2018-03-03 21:02:40');

-- ----------------------------
-- Table structure for t_penguin_subject
-- ----------------------------
DROP TABLE IF EXISTS `t_penguin_subject`;
CREATE TABLE `t_penguin_subject` (
  `id` int(8) NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `name` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '学科名称',
  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `question_num` int(11) DEFAULT '0' COMMENT '题目数量',
  `img_url` varchar(63) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '图片url',
  `state` int(4) DEFAULT '0' COMMENT '课程状态,0表示正常,1表示弃用',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of t_penguin_subject
-- ----------------------------
INSERT INTO `t_penguin_subject` VALUES ('1', '计算机组成原理', '2018-01-18 21:56:29', '2018-01-18 21:56:29', '0', 'problemset_default.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('2', 'C语言程序设计', '2018-01-18 22:32:54', '2018-01-18 22:32:54', '0', 'problemset_c.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('3', 'Java语言程序设计', '2018-01-18 22:32:54', '2018-01-18 22:32:54', '0', 'problemset_java.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('4', 'C++语言程序设计', '2018-01-18 22:32:54', '2018-01-18 22:32:54', '0', 'problemset_c++.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('5', 'Python语言程序设计', '2018-01-18 22:32:54', '2018-01-18 22:32:54', '0', 'problemset_python.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('6', '数据结构与算法', '2018-01-18 22:32:54', '2018-01-18 22:32:54', '0', 'problemset_datastructures.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('7', '软件测试', '2018-01-18 22:32:54', '2018-01-18 22:59:40', '0', 'problemset_softwareTest.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('8', '数据库概论', '2018-01-18 22:32:54', '2018-01-18 22:32:54', '0', 'problemset_database.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('9', '大学计算机', '2018-01-26 15:59:21', '2018-01-26 15:59:37', '0', 'problemset_computer.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('10', '人工智能原理', '2018-01-26 16:01:29', '2018-01-26 16:01:29', '0', 'problemset_ai.png', '0');
INSERT INTO `t_penguin_subject` VALUES ('11', '大数据算法', '2018-01-26 16:02:40', '2018-01-26 16:02:40', '0', 'problemset_bigdata.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('12', '物联网概论', '2018-01-26 16:05:06', '2018-01-26 16:05:13', '0', 'problemset_internetofthings.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('13', '计算机操作系统', '2018-01-26 16:06:13', '2018-01-26 16:06:13', '0', 'problemset_os.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('14', '计算机网络', '2018-01-26 16:07:25', '2018-01-26 16:08:35', '0', 'problemset_networld.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('15', '算法设计与分析入门', '2018-01-26 16:09:47', '2018-01-26 16:09:47', '0', 'problemset_algorithm.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('16', '计算机图形学', '2018-01-26 16:10:17', '2018-01-26 16:10:17', '0', 'problemset_graphic.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('17', '数字电路与系统', '2018-01-26 16:26:31', '2018-01-26 16:26:31', '0', 'problemset_digitalcircuits.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('19', '线性代数', '2018-03-04 20:40:10', '2018-03-04 20:40:10', '0', 'problemset_default.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('20', 'C语言程序设计', '2018-04-13 19:33:14', '2018-04-13 19:33:14', '0', 'problemset_c.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('21', 'Java语言程序设计', '2018-04-13 19:33:14', '2018-04-13 19:33:14', '0', 'problemset_java.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('22', 'C++语言程序设计', '2018-04-13 19:33:14', '2018-04-13 19:33:14', '0', 'problemset_c++.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('23', 'Python语言程序设计', '2018-04-13 19:33:14', '2018-04-13 19:33:14', '0', 'problemset_python.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('24', '数据结构与算法', '2018-04-13 19:33:14', '2018-04-13 19:33:14', '0', 'problemset_datastructures.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('25', '数据结构与算法', '2018-04-13 19:33:14', '2018-04-13 19:33:14', '0', 'problemset_datastructures.jpg', '0');
INSERT INTO `t_penguin_subject` VALUES ('26', '数据库概论', '2018-04-13 19:33:14', '2018-04-13 19:33:14', '0', 'problemset_database.jpg', '0');
